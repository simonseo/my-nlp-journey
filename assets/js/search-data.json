{
  
    
        "post0": {
            "title": "blah",
            "content": "blah . blah . for i in range(5): print(i) print(i**2) . 0 0 1 1 2 4 3 9 4 16 . a = 5 . aaaa = 10 . %config Completer.use_jedi = False .",
            "url": "https://simonseo.github.io/my-nlp-journey/2021/07/16/.-nbtest.html",
            "relUrl": "/2021/07/16/.-nbtest.html",
            "date": " • Jul 16, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "import numpy as np from nltk.tree import Tree . import torch from torch import nn class NaryTreeLSTM(nn.Module): def __init__(self, dim_h=500, vec_len=500, max_child_num=6): super(NaryTreeLSTM, self).__init__() self.dim_vec = vec_len self.dim_h = dim_h self.max_child_num = max_child_num device = &quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot; self.device = torch.device(device) # input gate self.Wi = nn.parameter.Parameter(torch.randn(self.dim_h, self.dim_vec, device=self.device)) self.bi = nn.parameter.Parameter(torch.zeros(self.dim_h, device=self.device)) self.Uis = nn.parameter.Parameter(torch.randn(max_child_num, self.dim_h, self.dim_h, device=self.device)) # self.register_parameter(&quot;Wi&quot;, self.Wi) # forget gate self.Wf = nn.parameter.Parameter(torch.randn(dim_h, self.dim_vec, device=self.device)) self.bf = nn.parameter.Parameter(torch.zeros(dim_h, device=self.device)) self.Ufs = nn.parameter.Parameter(torch.randn(max_child_num, dim_h, dim_h, device=self.device)) # # output gate self.Wo = nn.parameter.Parameter(torch.randn(dim_h, self.dim_vec, device=self.device)) self.bo = nn.parameter.Parameter(torch.zeros(dim_h, device=self.device)) self.Uos = nn.parameter.Parameter(torch.randn(max_child_num, dim_h, dim_h, device=self.device)) # # u self.Wu = nn.parameter.Parameter(torch.randn(dim_h, self.dim_vec, device=self.device)) self.bu = nn.parameter.Parameter(torch.zeros(dim_h, device=self.device)) self.Uus = nn.parameter.Parameter(torch.randn(max_child_num, dim_h, dim_h, device=self.device)) def forward(self, tree, inputs): node_num = len(tree.treepositions()) node_embedding = torch.zeros(node_num, 500, device=inputs.device) c, h, outputs = self.encode(tree, inputs, node_embedding, 0) return c, h, outputs def encode(self, tree, inputs, node_emb, idx_node=0): c_children = [] h_children = [] cur_idx = idx_node idx_node += 1 _input = inputs[cur_idx] if isinstance(tree, Tree): for child_idx in range(len(tree)): if child_idx == self.max_child_num: break child = tree[child_idx] c_subtree, h_subtree, node_emb = self.encode(child, inputs, node_emb, idx_node) idx_node += (len(child.treepositions()) if isinstance(child, Tree) else 1) c_children.append(c_subtree) h_children.append(h_subtree) else: c_children.append(_input) h_children.append(_input) c_q, h_q = self.encode_node(_input, c_children, h_children) node_emb[cur_idx] = h_q return c_q, h_q, node_emb def encode_node(self, x, cs, hs): x = torch.reshape(x, (self.dim_h,)) _Ui = torch.zeros(self.dim_h, device=self.device) _Uo = torch.zeros(self.dim_h, device=self.device) _Uu = torch.zeros(self.dim_h, device=self.device) _Uf = [torch.zeros(self.dim_h, device=self.device) for _ in range(len(cs))] for idx in range(len(cs)): _Ui = torch.add(_Ui, torch.matmul(self.Uis[idx], hs[idx])) _Uo = torch.add(_Uo, torch.matmul(self.Uos[idx], hs[idx])) _Uu = torch.add(_Uu, torch.matmul(self.Uus[idx], hs[idx])) for j in range(len(cs)): _Uf[idx] = torch.add(_Uf[idx], torch.dot(self.Ufs[idx][j].data, hs[j])) i = torch.sigmoid(torch.add(torch.add(torch.matmul(self.Wi, x), _Ui), self.bi)) o = torch.sigmoid(torch.add(torch.add(torch.matmul(self.Wo, x), _Uo), self.bo)) f = [torch.sigmoid(torch.add(torch.add(torch.matmul(self.Wf, x), _Uf[idx]), self.bf)) for idx in range(len(cs))] u = torch.tanh(torch.add(torch.add(torch.matmul(self.Wu, x), _Uu), self.bu)) c = torch.zeros(self.dim_h, device=self.device) for idx in range(len(cs)): c = torch.add(c, torch.mul(f[idx], cs[idx])) c = torch.add(torch.mul(i, u), c) h = torch.mul(o, torch.tanh(c)) return c, h . encoder = N_aryTreeLstm() encoder.initialize(ctx=ctx) c, h = self.encoder(tree, inputs, 0, ctx) . encoder = NaryTreeLSTM() . torch.device(&#39;cpu&#39;) . device(type=&#39;cpu&#39;) . t = Tree.fromstring(&quot;(S (NP I) (VP (V saw) (NP him)))&quot;) . t . /home/ubuntu/torchtest/lib/python3.6/site-packages/nltk/draw/__init__.py:15: UserWarning: nltk.draw package not loaded (please install Tkinter library). warnings.warn(&#34;nltk.draw package not loaded (please install Tkinter library).&#34;) . ModuleNotFoundError Traceback (most recent call last) ~/torchtest/lib/python3.6/site-packages/IPython/core/formatters.py in __call__(self, obj) 343 method = get_real_method(obj, self.print_method) 344 if method is not None: --&gt; 345 return method() 346 return None 347 else: ~/torchtest/lib/python3.6/site-packages/nltk/tree.py in _repr_png_(self) 798 import subprocess 799 import tempfile --&gt; 800 from nltk.draw.tree import tree_to_treesegment 801 from nltk.draw.util import CanvasFrame 802 from nltk.internals import find_binary ~/torchtest/lib/python3.6/site-packages/nltk/draw/tree.py in &lt;module&gt; 10 &#34;&#34;&#34; 11 &gt; 12 from tkinter import IntVar, Menu, Tk 13 14 from nltk.util import in_idle ModuleNotFoundError: No module named &#39;tkinter&#39; . Tree(&#39;S&#39;, [Tree(&#39;NP&#39;, [&#39;I&#39;]), Tree(&#39;VP&#39;, [Tree(&#39;V&#39;, [&#39;saw&#39;]), Tree(&#39;NP&#39;, [&#39;him&#39;])])]) .",
            "url": "https://simonseo.github.io/my-nlp-journey/2021/07/16/.-TreeLSTM.html",
            "relUrl": "/2021/07/16/.-TreeLSTM.html",
            "date": " • Jul 16, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "PyTorch for Deep Learning - Full Course (FreeCodeCamp Video) | . %config Completer.use_jedi = False . import torch import numpy as np . data = [[1,2,3], [5,43,2]] x_data = torch.tensor(data) x_data . tensor([[ 1, 2, 3], [ 5, 43, 2]]) . np_array = np.array(data) x_np = torch.from_numpy(np_array) np_array, x_np . (array([[ 1, 2, 3], [ 5, 43, 2]]), tensor([[ 1, 2, 3], [ 5, 43, 2]])) . tensor . x = torch.tensor(3.) w = torch.tensor(4., requires_grad=True) b = torch.tensor(5., requires_grad=True) . y = x*w +b y . tensor(17., grad_fn=&lt;AddBackward0&gt;) . y.backward() . print(x.grad, y.grad, w.grad, b.grad) . None None tensor(3.) tensor(1.) . /home/ubuntu/torchtest/lib/python3.6/site-packages/ipykernel_launcher.py:1: UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won&#39;t be populated during autograd.backward(). If you indeed want the gradient for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations. &#34;&#34;&#34;Entry point for launching an IPython kernel. . numpy . import numpy as np . x = np.array() . TypeError Traceback (most recent call last) &lt;ipython-input-3-2e51aa4d54bc&gt; in &lt;module&gt; -&gt; 1 x = np.array() TypeError: Required argument &#39;object&#39; (pos 1) not found . np.ndarray, np.array . (numpy.ndarray, &lt;function numpy.array&gt;) . apples and oranges . import torch . inputs = np.array([[73,67,43], [91,88,64], [102,43,37], [87,134,58], [69,96,70]], dtype=&#39;float32&#39;) inputs = torch.from_numpy(inputs) . outputs = np.array([ [56,70], [81,101], [119,133], [22,37], [103,119] ], dtype=&#39;float32&#39;) outputs = torch.from_numpy(outputs) . w = torch.randn(2,3,requires_grad=True) # 2 output vars from 3 input vars.. after we transpose it b = torch.randn(2, requires_grad=True) # initialized with normal distribution with mean 0 and standard deviation 1. print(w,b) . tensor([[ 0.9792, -0.1531, -0.2063], [ 0.5462, -0.4614, -1.7207]], requires_grad=True) tensor([0.9383, 1.0918], requires_grad=True) . def model(x, w, b): return x @ w.t() + b . preds = model(inputs) print(preds) . tensor([[ 53.2944, -63.9394], [ 63.3736, -99.9316], [ 86.6036, -26.7034], [ 53.6525, -113.0154], [ 39.3684, -125.9624]], grad_fn=&lt;AddBackward0&gt;) . print(outputs) . tensor([[ 56., 70.], [ 81., 101.], [119., 133.], [ 22., 37.], [103., 119.]]) . def mse(t1, t2): diff = t1-t2 return torch.sum(diff*diff)/diff.numel() . loss = mse(preds, outputs) print(loss) . tensor(17274.8008, grad_fn=&lt;DivBackward0&gt;) . print(f&quot;w.grad before backpropagation: {w.grad}&quot;) loss.backward() print(w) print(f&quot;w.grad after backpropagation: {w.grad}&quot;) # df/dw . w.grad before backpropagation: None tensor([[ 0.9792, -0.1531, -0.2063], [ 0.5462, -0.4614, -1.7207]], requires_grad=True) w.grad after backpropagation: tensor([[ -1348.5496, -998.5267, -1012.2916], [-14861.1689, -15428.3232, -10075.2607]]) . print(f&quot;b.grad before backpropagation: {b.grad}&quot;) loss.backward() print(b) print(f&quot;b.grad after backpropagation: {b.grad}&quot;) # df/db # RuntimeError: Trying to backward through the graph a second time, # but the saved intermediate results have already been freed. # Specify retain_graph=True when calling .backward() or autograd.grad() the first time. . b.grad before backpropagation: tensor([ -16.9415, -177.9104]) . RuntimeError Traceback (most recent call last) &lt;ipython-input-45-6b960b0c44e0&gt; in &lt;module&gt; 1 print(f&#34;b.grad before backpropagation: {b.grad}&#34;) -&gt; 2 loss.backward() 3 print(b) 4 print(f&#34;b.grad after backpropagation: {b.grad}&#34;) # df/db ~/torchtest/lib/python3.6/site-packages/torch/tensor.py in backward(self, gradient, retain_graph, create_graph, inputs) 243 create_graph=create_graph, 244 inputs=inputs) --&gt; 245 torch.autograd.backward(self, gradient, retain_graph, create_graph, inputs=inputs) 246 247 def register_hook(self, hook): ~/torchtest/lib/python3.6/site-packages/torch/autograd/__init__.py in backward(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs) 145 Variable._execution_engine.run_backward( 146 tensors, grad_tensors_, retain_graph, create_graph, inputs, --&gt; 147 allow_unreachable=True, accumulate_grad=True) # allow_unreachable flag 148 149 RuntimeError: Trying to backward through the graph a second time, but the saved intermediate results have already been freed. Specify retain_graph=True when calling .backward() or autograd.grad() the first time. . w.grad.zero_() b.grad.zero_() print(w.grad, b.grad) . tensor([[0., 0., 0.], [0., 0., 0.]]) tensor([0., 0.]) . w = torch.randn(2,3,requires_grad=True) # 2 output vars from 3 input vars.. after we transpose it b = torch.randn(2, requires_grad=True) # initialized with normal distribution with mean 0 and standard deviation 1. preds = model(inputs, w, b) loss = mse(preds, outputs) loss.backward() # We use torch.no_grad to indicate to PyTorch # that we shouldn&#39;t track, calculate or modify gradients # while updating the weights and biases. with torch.no_grad(): learning_rate = 1e-5 w -= w.grad * learning_rate b -= b.grad * learning_rate w.grad.zero_() b.grad.zero_() . w, w.grad . (tensor([[ 0.2837, 1.9113, -0.8235], [ 0.4683, 0.4118, -0.0504]], requires_grad=True), tensor([[0., 0., 0.], [0., 0., 0.]])) . for i in range(1000): preds = model(inputs, w, b) loss = mse(preds, outputs) if (i % 20 == 0): print(loss) loss.backward() # We use torch.no_grad to indicate to PyTorch # that we shouldn&#39;t track, calculate or modify gradients # while updating the weights and biases. with torch.no_grad(): learning_rate = 1e-5 w -= w.grad * learning_rate b -= b.grad * learning_rate w.grad.zero_() b.grad.zero_() . tensor(166.0341, grad_fn=&lt;DivBackward0&gt;) tensor(165.9020, grad_fn=&lt;DivBackward0&gt;) tensor(165.7747, grad_fn=&lt;DivBackward0&gt;) tensor(165.6521, grad_fn=&lt;DivBackward0&gt;) tensor(165.5339, grad_fn=&lt;DivBackward0&gt;) tensor(165.4202, grad_fn=&lt;DivBackward0&gt;) tensor(165.3106, grad_fn=&lt;DivBackward0&gt;) tensor(165.2050, grad_fn=&lt;DivBackward0&gt;) tensor(165.1034, grad_fn=&lt;DivBackward0&gt;) tensor(165.0053, grad_fn=&lt;DivBackward0&gt;) tensor(164.9109, grad_fn=&lt;DivBackward0&gt;) tensor(164.8200, grad_fn=&lt;DivBackward0&gt;) tensor(164.7323, grad_fn=&lt;DivBackward0&gt;) tensor(164.6480, grad_fn=&lt;DivBackward0&gt;) tensor(164.5667, grad_fn=&lt;DivBackward0&gt;) tensor(164.4884, grad_fn=&lt;DivBackward0&gt;) tensor(164.4130, grad_fn=&lt;DivBackward0&gt;) tensor(164.3403, grad_fn=&lt;DivBackward0&gt;) tensor(164.2702, grad_fn=&lt;DivBackward0&gt;) tensor(164.2027, grad_fn=&lt;DivBackward0&gt;) tensor(164.1379, grad_fn=&lt;DivBackward0&gt;) tensor(164.0752, grad_fn=&lt;DivBackward0&gt;) tensor(164.0150, grad_fn=&lt;DivBackward0&gt;) tensor(163.9569, grad_fn=&lt;DivBackward0&gt;) tensor(163.9009, grad_fn=&lt;DivBackward0&gt;) tensor(163.8470, grad_fn=&lt;DivBackward0&gt;) tensor(163.7951, grad_fn=&lt;DivBackward0&gt;) tensor(163.7451, grad_fn=&lt;DivBackward0&gt;) tensor(163.6969, grad_fn=&lt;DivBackward0&gt;) tensor(163.6505, grad_fn=&lt;DivBackward0&gt;) tensor(163.6057, grad_fn=&lt;DivBackward0&gt;) tensor(163.5626, grad_fn=&lt;DivBackward0&gt;) tensor(163.5213, grad_fn=&lt;DivBackward0&gt;) tensor(163.4812, grad_fn=&lt;DivBackward0&gt;) tensor(163.4427, grad_fn=&lt;DivBackward0&gt;) tensor(163.4056, grad_fn=&lt;DivBackward0&gt;) tensor(163.3698, grad_fn=&lt;DivBackward0&gt;) tensor(163.3354, grad_fn=&lt;DivBackward0&gt;) tensor(163.3022, grad_fn=&lt;DivBackward0&gt;) tensor(163.2703, grad_fn=&lt;DivBackward0&gt;) tensor(163.2395, grad_fn=&lt;DivBackward0&gt;) tensor(163.2099, grad_fn=&lt;DivBackward0&gt;) tensor(163.1814, grad_fn=&lt;DivBackward0&gt;) tensor(163.1538, grad_fn=&lt;DivBackward0&gt;) tensor(163.1273, grad_fn=&lt;DivBackward0&gt;) tensor(163.1017, grad_fn=&lt;DivBackward0&gt;) tensor(163.0771, grad_fn=&lt;DivBackward0&gt;) tensor(163.0534, grad_fn=&lt;DivBackward0&gt;) tensor(163.0305, grad_fn=&lt;DivBackward0&gt;) tensor(163.0086, grad_fn=&lt;DivBackward0&gt;) . print(w, b) . tensor([[ 0.7763, -1.3736, 2.3343], [ 0.8697, -1.4122, 2.5698]], requires_grad=True) tensor([ 1.1411, -0.4500], requires_grad=True) . print(preds) . tensor([[ 66.1565, 78.9261], [100.3044, 118.8911], [107.6321, 122.6227], [ 20.0077, 35.0331], [ 86.2410, 103.8777]], grad_fn=&lt;AddBackward0&gt;) . print(outputs) . tensor([[ 56., 70.], [ 81., 101.], [119., 133.], [ 22., 37.], [103., 119.]]) . Linear Regression using torch.nn . import torch.nn as nn # allows us to access a small section of the training data using the array indexing notation ([0:3] in the above code). It returns a tuple (or pair), in which the first element contains the input variables for the selected rows, and the second contains the targets. from torch.utils.data import TensorDataset # split the data into batches of a predefined size while training from torch.utils.data import DataLoader # Import nn.functional - contains many useful loss functions and several other utilities. import torch.nn.functional as F . inputs = np.array([[73, 67, 43], [91, 88, 64], [87, 134, 58], [102, 43, 37], [69, 96, 70], [73, 67, 43], [91, 88, 64], [87, 134, 58], [102, 43, 37], [69, 96, 70], [73, 67, 43], [91, 88, 64], [87, 134, 58], [102, 43, 37], [69, 96, 70]], dtype=&#39;float32&#39;) # Targets (apples, oranges) targets = np.array([[56, 70], [81, 101], [119, 133], [22, 37], [103, 119], [56, 70], [81, 101], [119, 133], [22, 37], [103, 119], [56, 70], [81, 101], [119, 133], [22, 37], [103, 119]], dtype=&#39;float32&#39;) inputs = torch.from_numpy(inputs) targets = torch.from_numpy(targets) . train_ds = TensorDataset(inputs, targets) . train_ds[0:3, 1] . (tensor([ 67., 88., 134.]), tensor([ 70., 101., 133.])) . inputs.size(), len(inputs) . (torch.Size([15, 3]), 15) . batch_size = 5 # shuffle set to True to have the data reshuffled at every epoch train_dl = DataLoader(train_ds, batch_size, shuffle=True) . for xbatch, ybatch in train_dl: print(xbatch) print(ybatch) . tensor([[102., 43., 37.], [ 69., 96., 70.], [ 73., 67., 43.], [ 91., 88., 64.], [102., 43., 37.]]) tensor([[ 22., 37.], [103., 119.], [ 56., 70.], [ 81., 101.], [ 22., 37.]]) tensor([[ 69., 96., 70.], [ 91., 88., 64.], [ 69., 96., 70.], [102., 43., 37.], [ 73., 67., 43.]]) tensor([[103., 119.], [ 81., 101.], [103., 119.], [ 22., 37.], [ 56., 70.]]) tensor([[ 87., 134., 58.], [ 87., 134., 58.], [ 87., 134., 58.], [ 91., 88., 64.], [ 73., 67., 43.]]) tensor([[119., 133.], [119., 133.], [119., 133.], [ 81., 101.], [ 56., 70.]]) . model = nn.Linear(3,2) # 3 input vars to 2 output vars . print(model.weight, model.bias) # y = xW^T + b # shape of W is 2x3 . Parameter containing: tensor([[ 0.1638, 0.2068, -0.3615], [ 0.5245, -0.1700, 0.0985]], requires_grad=True) Parameter containing: tensor([-0.4813, -0.3101], requires_grad=True) . preds = model(inputs) . preds . tensor([[ 9.7897, 30.8231], [ 9.4902, 38.7623], [20.5184, 28.2525], [11.7449, 49.5232], [ 5.3723, 26.4540], [ 9.7897, 30.8231], [ 9.4902, 38.7623], [20.5184, 28.2525], [11.7449, 49.5232], [ 5.3723, 26.4540], [ 9.7897, 30.8231], [ 9.4902, 38.7623], [20.5184, 28.2525], [11.7449, 49.5232], [ 5.3723, 26.4540]], grad_fn=&lt;AddmmBackward&gt;) . list(filter(lambda x: &#39;loss&#39; in x, dir(F))) . [&#39;cosine_embedding_loss&#39;, &#39;ctc_loss&#39;, &#39;gaussian_nll_loss&#39;, &#39;hinge_embedding_loss&#39;, &#39;l1_loss&#39;, &#39;margin_ranking_loss&#39;, &#39;mse_loss&#39;, &#39;multi_margin_loss&#39;, &#39;multilabel_margin_loss&#39;, &#39;multilabel_soft_margin_loss&#39;, &#39;nll_loss&#39;, &#39;poisson_nll_loss&#39;, &#39;smooth_l1_loss&#39;, &#39;soft_margin_loss&#39;, &#39;triplet_margin_loss&#39;, &#39;triplet_margin_with_distance_loss&#39;] . loss = F.mse_loss(model(inputs), targets) print(loss) . tensor(5168.5991, grad_fn=&lt;MseLossBackward&gt;) . optim = torch.optim.SGD(model.parameters(), lr=1e-5) . def fit(num_epochs, model, loss_fn, opt, train_dl): # Repeat for given number of epochs for epoch in range(num_epochs): # Train with batches of data for xb,yb in train_dl: # 1. Generate predictions pred = model(xb) # 2. Calculate loss loss = loss_fn(pred, yb) # 3. Compute gradients loss.backward() # 4. Update parameters using gradients opt.step() # 5. Reset the gradients to zero opt.zero_grad() # Print the progress if (epoch+1) % 10 == 0: print(&#39;Epoch [{}/{}], Loss: {:.4f}&#39;.format(epoch+1, num_epochs, loss.item())) return . model = nn.Linear(3,2) optimizer = torch.optim.SGD(model.parameters(), lr=1e-4) fit(100, model, F.mse_loss, optimizer, train_dl) . Epoch [10/100], Loss: 101.0640 Epoch [20/100], Loss: 41.2558 Epoch [30/100], Loss: 20.4440 Epoch [40/100], Loss: 38.2093 Epoch [50/100], Loss: 14.2622 Epoch [60/100], Loss: 0.2922 Epoch [70/100], Loss: 2.0149 Epoch [80/100], Loss: 1.1263 Epoch [90/100], Loss: 1.5358 Epoch [100/100], Loss: 1.9914 . model(inputs) . tensor([[ 58.1712, 70.5943], [ 83.1211, 100.6067], [120.6332, 133.9079], [ 22.0033, 37.4102], [102.6614, 118.7531], [ 58.1712, 70.5943], [ 83.1211, 100.6067], [120.6332, 133.9079], [ 22.0033, 37.4102], [102.6614, 118.7531], [ 58.1712, 70.5943], [ 83.1211, 100.6067], [120.6332, 133.9079], [ 22.0033, 37.4102], [102.6614, 118.7531]], grad_fn=&lt;AddmmBackward&gt;) . targets . tensor([[ 56., 70.], [ 81., 101.], [119., 133.], [ 22., 37.], [103., 119.], [ 56., 70.], [ 81., 101.], [119., 133.], [ 22., 37.], [103., 119.], [ 56., 70.], [ 81., 101.], [119., 133.], [ 22., 37.], [103., 119.]]) . params = model.parameters() . print(model) print(model.parameters()) print(model.weight) print(model.bias) . Linear(in_features=3, out_features=2, bias=True) &lt;generator object Module.parameters at 0x7f04536d50f8&gt; Parameter containing: tensor([[-0.3934, 0.8671, 0.6582], [-0.2928, 0.8117, 0.8684]], requires_grad=True) Parameter containing: tensor([0.4906, 0.2416], requires_grad=True) . Snipperts . Split data . from torch.utils.data import random_split train_ds, val_ds = random_split(dataset, [50000, 10000]) len(train_ds), len(val_ds) . DataLoader . We can now create data loaders to help us load the data in batches. We&#39;ll use a batch size of 128. . from torch.utils.data import DataLoader batch_size = 128 train_loader = DataLoader(train_ds, batch_size, shuffle=True) val_loader = DataLoader(val_ds, batch_size) . We set shuffle=True for the training data loader to ensure that the batches generated in each epoch are different. This randomization helps generalize &amp; speed up the training process. On the other hand, since the validation data loader is used only for evaluating the model, there is no need to shuffle the images. .",
            "url": "https://simonseo.github.io/my-nlp-journey/2021/07/16/.-Torch-Tut.html",
            "relUrl": "/2021/07/16/.-Torch-Tut.html",
            "date": " • Jul 16, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "Using Virtual Environments in Jupyter Notebook and Python . 주피터 (Jupyter Notebook) 설치하여 웹브라우저로 서버 관리 - 우분투 . import torch from torch import nn from torch.utils.data import DataLoader from torchvision import datasets from torchvision.transforms import ToTensor, Lambda, Compose import matplotlib.pyplot as plt print(torch.rand(5,3)) print(torch.cuda.is_available()) . tensor([[0.8888, 0.3437, 0.0741], [0.2750, 0.4212, 0.5925], [0.1469, 0.9967, 0.2159], [0.2730, 0.4382, 0.2797], [0.1739, 0.6737, 0.2798]]) False . training_data = datasets.FashionMNIST( root=&quot;data&quot;, train=True, download=True, transform=ToTensor(), ) # 공개 데이터셋에서 테스트 데이터를 내려받습니다. test_data = datasets.FashionMNIST( root=&quot;data&quot;, train=False, download=True, transform=ToTensor(), ) . batch_size = 64 # 데이터로더를 생성합니다. train_dataloader = DataLoader(training_data, batch_size=batch_size) test_dataloader = DataLoader(test_data, batch_size=batch_size) # each X, y is a batch of {batch_size} datapoints cnt = 0 for X, y in test_dataloader: print(&quot;Shape of X [N, C, H, W]: &quot;, X.shape) print(&quot;Shape of y: &quot;, y.shape, y.dtype) cnt += 1 if cnt &gt; 5: break . Shape of X [N, C, H, W]: torch.Size([64, 1, 28, 28]) Shape of y: torch.Size([64]) torch.int64 Shape of X [N, C, H, W]: torch.Size([64, 1, 28, 28]) Shape of y: torch.Size([64]) torch.int64 Shape of X [N, C, H, W]: torch.Size([64, 1, 28, 28]) Shape of y: torch.Size([64]) torch.int64 Shape of X [N, C, H, W]: torch.Size([64, 1, 28, 28]) Shape of y: torch.Size([64]) torch.int64 Shape of X [N, C, H, W]: torch.Size([64, 1, 28, 28]) Shape of y: torch.Size([64]) torch.int64 Shape of X [N, C, H, W]: torch.Size([64, 1, 28, 28]) Shape of y: torch.Size([64]) torch.int64 . device = &quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot; print(&quot;Using {} device&quot;.format(device)) # 모델을 정의합니다. class NeuralNetwork(nn.Module): def __init__(self): super().__init__() self.flatten = nn.Flatten() self.linear_relu_stack = nn.Sequential( nn.Linear(28*28, 512), nn.ReLU(), nn.Linear(512, 512), nn.ReLU(), nn.Linear(512, 10), nn.ReLU() ) def forward(self, x): x = self.flatten(x) logits = self.linear_relu_stack(x) return logits model = NeuralNetwork().to(device) print(model) . Using cpu device NeuralNetwork( (flatten): Flatten(start_dim=1, end_dim=-1) (linear_relu_stack): Sequential( (0): Linear(in_features=784, out_features=512, bias=True) (1): ReLU() (2): Linear(in_features=512, out_features=512, bias=True) (3): ReLU() (4): Linear(in_features=512, out_features=10, bias=True) (5): ReLU() ) ) . loss_fn = nn.CrossEntropyLoss() optimizer = torch.optim.SGD(model.parameters(), lr=1e-3) . def train(dataloader, model, loss_fn, optimizer): size = len(dataloader.dataset) for batch, (X, y) in enumerate(dataloader): X, y = X.to(device), y.to(device) # 예측 오류 계산 pred = model(X) loss = loss_fn(pred, y) # 역전파 optimizer.zero_grad() loss.backward() optimizer.step() if batch % 100 == 0: loss, current = loss.item(), batch * len(X) print(f&quot;loss: {loss:&gt;7f} [{current:&gt;5d}/{size:&gt;5d}]&quot;) . def test(dataloader, model): size = len(dataloader.dataset) model.eval() test_loss, correct = 0, 0 with torch.no_grad(): for X, y in dataloader: X, y = X.to(device), y.to(device) pred = model(X) test_loss += loss_fn(pred, y).item() correct += (pred.argmax(1) == y).type(torch.float).sum().item() test_loss /= size correct /= size print(f&quot;Test Error: n Accuracy: {(100*correct):&gt;0.1f}%, Avg loss: {test_loss:&gt;8f} n&quot;) . %%capture output # Save, close tab, come back later. The output is now stored in the output variable: # output.show() # This will show all interim print results as well as the plain or rich output cell. epochs = 5 for t in range(epochs): print(f&quot;Epoch {t+1} n-&quot;) train(train_dataloader, model, loss_fn, optimizer) test(test_dataloader, model) print(&quot;Done!&quot;) . output.show() . Epoch 1 - loss: 1.846454 [ 0/60000] loss: 1.840754 [ 6400/60000] loss: 1.688818 [12800/60000] loss: 1.605958 [19200/60000] loss: 1.861017 [25600/60000] loss: 1.867185 [32000/60000] loss: 1.773537 [38400/60000] loss: 1.907231 [44800/60000] loss: 1.729227 [51200/60000] loss: 1.645265 [57600/60000] Test Error: Accuracy: 46.8%, Avg loss: 0.027309 Epoch 2 - loss: 1.846454 [ 0/60000] loss: 1.840754 [ 6400/60000] loss: 1.688818 [12800/60000] loss: 1.605958 [19200/60000] loss: 1.861017 [25600/60000] loss: 1.867185 [32000/60000] loss: 1.773537 [38400/60000] loss: 1.907231 [44800/60000] loss: 1.729227 [51200/60000] loss: 1.645265 [57600/60000] Test Error: Accuracy: 46.8%, Avg loss: 0.027309 Epoch 3 - loss: 1.846454 [ 0/60000] loss: 1.840754 [ 6400/60000] loss: 1.688818 [12800/60000] loss: 1.605958 [19200/60000] loss: 1.861017 [25600/60000] loss: 1.867185 [32000/60000] loss: 1.773537 [38400/60000] loss: 1.907231 [44800/60000] loss: 1.729227 [51200/60000] loss: 1.645265 [57600/60000] Test Error: Accuracy: 46.8%, Avg loss: 0.027309 Epoch 4 - loss: 1.846454 [ 0/60000] loss: 1.840754 [ 6400/60000] loss: 1.688818 [12800/60000] loss: 1.605958 [19200/60000] loss: 1.861017 [25600/60000] loss: 1.867185 [32000/60000] loss: 1.773537 [38400/60000] loss: 1.907231 [44800/60000] loss: 1.729227 [51200/60000] loss: 1.645265 [57600/60000] Test Error: Accuracy: 46.8%, Avg loss: 0.027309 Epoch 5 - loss: 1.846454 [ 0/60000] loss: 1.840754 [ 6400/60000] loss: 1.688818 [12800/60000] loss: 1.605958 [19200/60000] loss: 1.861017 [25600/60000] loss: 1.867185 [32000/60000] loss: 1.773537 [38400/60000] loss: 1.907231 [44800/60000] loss: 1.729227 [51200/60000] loss: 1.645265 [57600/60000] Test Error: Accuracy: 46.8%, Avg loss: 0.027309 Done! . &#47784;&#45944; &#51200;&#51109; &amp; &#48520;&#47084;&#50724;&#44592; . torch.save(model.state_dict(), &quot;model.pth&quot;) print(&quot;Saved PyTorch Model State to model.pth&quot;) . Saved PyTorch Model State to model.pth . model = NeuralNetwork() model.load_state_dict(torch.load(&quot;model.pth&quot;)) . &lt;All keys matched successfully&gt; . classes = [ &quot;T-shirt/top&quot;, &quot;Trouser&quot;, &quot;Pullover&quot;, &quot;Dress&quot;, &quot;Coat&quot;, &quot;Sandal&quot;, &quot;Shirt&quot;, &quot;Sneaker&quot;, &quot;Bag&quot;, &quot;Ankle boot&quot;, ] model.eval() x, y = test_data[0][0], test_data[0][1] with torch.no_grad(): pred = model(x) predicted, actual = classes[pred[0].argmax(0)], classes[y] print(f&#39;Predicted: &quot;{predicted}&quot;, Actual: &quot;{actual}&quot;&#39;) . Predicted: &#34;Sneaker&#34;, Actual: &#34;Ankle boot&#34; . 3+3 . 6 . import torch . dir(torch) . [&#39;AVG&#39;, &#39;AggregationType&#39;, &#39;AnyType&#39;, &#39;Argument&#39;, &#39;ArgumentSpec&#39;, &#39;BFloat16Storage&#39;, &#39;BFloat16Tensor&#39;, &#39;BenchmarkConfig&#39;, &#39;BenchmarkExecutionStats&#39;, &#39;Block&#39;, &#39;BoolStorage&#39;, &#39;BoolTensor&#39;, &#39;BoolType&#39;, &#39;BufferDict&#39;, &#39;ByteStorage&#39;, &#39;ByteTensor&#39;, &#39;CONV_BN_FUSION&#39;, &#39;CallStack&#39;, &#39;Capsule&#39;, &#39;CharStorage&#39;, &#39;CharTensor&#39;, &#39;ClassType&#39;, &#39;Code&#39;, &#39;CompilationUnit&#39;, &#39;CompleteArgumentSpec&#39;, &#39;ComplexDoubleStorage&#39;, &#39;ComplexFloatStorage&#39;, &#39;ComplexType&#39;, &#39;ConcreteModuleType&#39;, &#39;ConcreteModuleTypeBuilder&#39;, &#39;DeepCopyMemoTable&#39;, &#39;DeviceObjType&#39;, &#39;DictType&#39;, &#39;DisableTorchFunction&#39;, &#39;DoubleStorage&#39;, &#39;DoubleTensor&#39;, &#39;EnumType&#39;, &#39;ErrorReport&#39;, &#39;ExecutionPlan&#39;, &#39;FUSE_ADD_RELU&#39;, &#39;FatalError&#39;, &#39;FileCheck&#39;, &#39;FloatStorage&#39;, &#39;FloatTensor&#39;, &#39;FloatType&#39;, &#39;FunctionSchema&#39;, &#39;Future&#39;, &#39;FutureType&#39;, &#39;Generator&#39;, &#39;Gradient&#39;, &#39;Graph&#39;, &#39;GraphExecutorState&#39;, &#39;HOIST_CONV_PACKED_PARAMS&#39;, &#39;HalfStorage&#39;, &#39;HalfStorageBase&#39;, &#39;HalfTensor&#39;, &#39;INSERT_FOLD_PREPACK_OPS&#39;, &#39;IODescriptor&#39;, &#39;InferredType&#39;, &#39;IntStorage&#39;, &#39;IntTensor&#39;, &#39;IntType&#39;, &#39;InterfaceType&#39;, &#39;JITException&#39;, &#39;ListType&#39;, &#39;LiteScriptModule&#39;, &#39;LockingLogger&#39;, &#39;LoggerBase&#39;, &#39;LongStorage&#39;, &#39;LongTensor&#39;, &#39;MobileOptimizerType&#39;, &#39;ModuleDict&#39;, &#39;Node&#39;, &#39;NoneType&#39;, &#39;NoopLogger&#39;, &#39;NumberType&#39;, &#39;OptionalType&#39;, &#39;ParameterDict&#39;, &#39;PyObjectType&#39;, &#39;PyTorchFileReader&#39;, &#39;PyTorchFileWriter&#39;, &#39;QInt32Storage&#39;, &#39;QInt32StorageBase&#39;, &#39;QInt8Storage&#39;, &#39;QInt8StorageBase&#39;, &#39;QUInt4x2Storage&#39;, &#39;QUInt8Storage&#39;, &#39;REMOVE_DROPOUT&#39;, &#39;RRefType&#39;, &#39;SUM&#39;, &#39;ScriptClass&#39;, &#39;ScriptFunction&#39;, &#39;ScriptMethod&#39;, &#39;ScriptModule&#39;, &#39;ScriptObject&#39;, &#39;Set&#39;, &#39;ShortStorage&#39;, &#39;ShortTensor&#39;, &#39;Size&#39;, &#39;StaticRuntime&#39;, &#39;Storage&#39;, &#39;Stream&#39;, &#39;StreamObjType&#39;, &#39;StringType&#39;, &#39;TYPE_CHECKING&#39;, &#39;Tensor&#39;, &#39;TensorType&#39;, &#39;ThroughputBenchmark&#39;, &#39;TracingState&#39;, &#39;TupleType&#39;, &#39;Type&#39;, &#39;USE_GLOBAL_DEPS&#39;, &#39;USE_RTLD_GLOBAL_WITH_LIBTORCH&#39;, &#39;Use&#39;, &#39;Value&#39;, &#39;_C&#39;, &#39;_StorageBase&#39;, &#39;_VF&#39;, &#39;__all__&#39;, &#39;__annotations__&#39;, &#39;__builtins__&#39;, &#39;__cached__&#39;, &#39;__config__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__future__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__path__&#39;, &#39;__spec__&#39;, &#39;__version__&#39;, &#39;_adaptive_avg_pool2d&#39;, &#39;_add_batch_dim&#39;, &#39;_add_relu&#39;, &#39;_add_relu_&#39;, &#39;_addmv_impl_&#39;, &#39;_aminmax&#39;, &#39;_amp_foreach_non_finite_check_and_unscale_&#39;, &#39;_amp_update_scale&#39;, &#39;_assert&#39;, &#39;_autograd_functions&#39;, &#39;_baddbmm_mkl_&#39;, &#39;_batch_norm_impl_index&#39;, &#39;_bmm&#39;, &#39;_cast_Byte&#39;, &#39;_cast_Char&#39;, &#39;_cast_Double&#39;, &#39;_cast_Float&#39;, &#39;_cast_Half&#39;, &#39;_cast_Int&#39;, &#39;_cast_Long&#39;, &#39;_cast_Short&#39;, &#39;_cat&#39;, &#39;_choose_qparams_per_tensor&#39;, &#39;_classes&#39;, &#39;_compute_linear_combination&#39;, &#39;_conj&#39;, &#39;_convolution&#39;, &#39;_convolution_nogroup&#39;, &#39;_copy_from&#39;, &#39;_ctc_loss&#39;, &#39;_cudnn_ctc_loss&#39;, &#39;_cudnn_init_dropout_state&#39;, &#39;_cudnn_rnn&#39;, &#39;_cudnn_rnn_flatten_weight&#39;, &#39;_cufft_clear_plan_cache&#39;, &#39;_cufft_get_plan_cache_max_size&#39;, &#39;_cufft_get_plan_cache_size&#39;, &#39;_cufft_set_plan_cache_max_size&#39;, &#39;_cummax_helper&#39;, &#39;_cummin_helper&#39;, &#39;_debug_has_internal_overlap&#39;, &#39;_dim_arange&#39;, &#39;_dirichlet_grad&#39;, &#39;_embedding_bag&#39;, &#39;_embedding_bag_forward_only&#39;, &#39;_empty_affine_quantized&#39;, &#39;_empty_per_channel_affine_quantized&#39;, &#39;_euclidean_dist&#39;, &#39;_fake_quantize_learnable_per_channel_affine&#39;, &#39;_fake_quantize_learnable_per_tensor_affine&#39;, &#39;_fft_c2c&#39;, &#39;_fft_c2r&#39;, &#39;_fft_r2c&#39;, &#39;_foreach_abs&#39;, &#39;_foreach_abs_&#39;, &#39;_foreach_acos&#39;, &#39;_foreach_acos_&#39;, &#39;_foreach_add&#39;, &#39;_foreach_add_&#39;, &#39;_foreach_addcdiv&#39;, &#39;_foreach_addcdiv_&#39;, &#39;_foreach_addcmul&#39;, &#39;_foreach_addcmul_&#39;, &#39;_foreach_asin&#39;, &#39;_foreach_asin_&#39;, &#39;_foreach_atan&#39;, &#39;_foreach_atan_&#39;, &#39;_foreach_ceil&#39;, &#39;_foreach_ceil_&#39;, &#39;_foreach_cos&#39;, &#39;_foreach_cos_&#39;, &#39;_foreach_cosh&#39;, &#39;_foreach_cosh_&#39;, &#39;_foreach_div&#39;, &#39;_foreach_div_&#39;, &#39;_foreach_erf&#39;, &#39;_foreach_erf_&#39;, &#39;_foreach_erfc&#39;, &#39;_foreach_erfc_&#39;, &#39;_foreach_exp&#39;, &#39;_foreach_exp_&#39;, &#39;_foreach_expm1&#39;, &#39;_foreach_expm1_&#39;, &#39;_foreach_floor&#39;, &#39;_foreach_floor_&#39;, &#39;_foreach_frac&#39;, &#39;_foreach_frac_&#39;, &#39;_foreach_lgamma&#39;, &#39;_foreach_lgamma_&#39;, &#39;_foreach_log&#39;, &#39;_foreach_log10&#39;, &#39;_foreach_log10_&#39;, &#39;_foreach_log1p&#39;, &#39;_foreach_log1p_&#39;, &#39;_foreach_log2&#39;, &#39;_foreach_log2_&#39;, &#39;_foreach_log_&#39;, &#39;_foreach_maximum&#39;, &#39;_foreach_minimum&#39;, &#39;_foreach_mul&#39;, &#39;_foreach_mul_&#39;, &#39;_foreach_neg&#39;, &#39;_foreach_neg_&#39;, &#39;_foreach_reciprocal&#39;, &#39;_foreach_reciprocal_&#39;, &#39;_foreach_round&#39;, &#39;_foreach_round_&#39;, &#39;_foreach_sigmoid&#39;, &#39;_foreach_sigmoid_&#39;, &#39;_foreach_sin&#39;, &#39;_foreach_sin_&#39;, &#39;_foreach_sinh&#39;, &#39;_foreach_sinh_&#39;, &#39;_foreach_sqrt&#39;, &#39;_foreach_sqrt_&#39;, &#39;_foreach_sub&#39;, &#39;_foreach_sub_&#39;, &#39;_foreach_tan&#39;, &#39;_foreach_tan_&#39;, &#39;_foreach_tanh&#39;, &#39;_foreach_tanh_&#39;, &#39;_foreach_trunc&#39;, &#39;_foreach_trunc_&#39;, &#39;_foreach_zero_&#39;, &#39;_fused_dropout&#39;, &#39;_grid_sampler_2d_cpu_fallback&#39;, &#39;_has_compatible_shallow_copy_type&#39;, &#39;_import_dotted_name&#39;, &#39;_index_copy_&#39;, &#39;_index_put_impl_&#39;, &#39;_initExtension&#39;, &#39;_jit_internal&#39;, &#39;_linalg_inv_out_helper_&#39;, &#39;_linalg_qr_helper&#39;, &#39;_linalg_solve_out_helper_&#39;, &#39;_linalg_utils&#39;, &#39;_load_global_deps&#39;, &#39;_lobpcg&#39;, &#39;_log_softmax&#39;, &#39;_log_softmax_backward_data&#39;, &#39;_logcumsumexp&#39;, &#39;_lowrank&#39;, &#39;_lu_solve_helper&#39;, &#39;_lu_with_info&#39;, &#39;_make_dual&#39;, &#39;_make_per_channel_quantized_tensor&#39;, &#39;_make_per_tensor_quantized_tensor&#39;, &#39;_masked_scale&#39;, &#39;_mkldnn&#39;, &#39;_mkldnn_reshape&#39;, &#39;_mkldnn_transpose&#39;, &#39;_mkldnn_transpose_&#39;, &#39;_mode&#39;, &#39;_namedtensor_internals&#39;, &#39;_nnpack_available&#39;, &#39;_nnpack_spatial_convolution&#39;, &#39;_ops&#39;, &#39;_pack_padded_sequence&#39;, &#39;_pad_packed_sequence&#39;, &#39;_remove_batch_dim&#39;, &#39;_reshape_from_tensor&#39;, &#39;_rowwise_prune&#39;, &#39;_s_where&#39;, &#39;_sample_dirichlet&#39;, &#39;_saturate_weight_to_fp16&#39;, &#39;_shape_as_tensor&#39;, &#39;_six&#39;, &#39;_sobol_engine_draw&#39;, &#39;_sobol_engine_ff_&#39;, &#39;_sobol_engine_initialize_state_&#39;, &#39;_sobol_engine_scramble_&#39;, &#39;_softmax&#39;, &#39;_softmax_backward_data&#39;, &#39;_sparse_addmm&#39;, &#39;_sparse_coo_tensor_unsafe&#39;, &#39;_sparse_log_softmax&#39;, &#39;_sparse_log_softmax_backward_data&#39;, &#39;_sparse_matrix_mask_helper&#39;, &#39;_sparse_mm&#39;, &#39;_sparse_softmax&#39;, &#39;_sparse_softmax_backward_data&#39;, &#39;_sparse_sparse_matmul&#39;, &#39;_sparse_sum&#39;, &#39;_stack&#39;, &#39;_standard_gamma&#39;, &#39;_standard_gamma_grad&#39;, &#39;_std&#39;, &#39;_storage_classes&#39;, &#39;_string_classes&#39;, &#39;_syevd_helper&#39;, &#39;_tensor_classes&#39;, &#39;_tensor_str&#39;, &#39;_test_serialization_subcmul&#39;, &#39;_trilinear&#39;, &#39;_unique&#39;, &#39;_unique2&#39;, &#39;_unpack_dual&#39;, &#39;_use_cudnn_ctc_loss&#39;, &#39;_use_cudnn_rnn_flatten_weight&#39;, &#39;_utils&#39;, &#39;_utils_internal&#39;, &#39;_validate_sparse_coo_tensor_args&#39;, &#39;_var&#39;, &#39;_vmap_internals&#39;, &#39;_weight_norm&#39;, &#39;_weight_norm_cuda_interface&#39;, &#39;abs&#39;, &#39;abs_&#39;, &#39;absolute&#39;, &#39;acos&#39;, &#39;acos_&#39;, &#39;acosh&#39;, &#39;acosh_&#39;, &#39;adaptive_avg_pool1d&#39;, &#39;adaptive_max_pool1d&#39;, &#39;add&#39;, &#39;addbmm&#39;, &#39;addcdiv&#39;, &#39;addcmul&#39;, &#39;addmm&#39;, &#39;addmv&#39;, &#39;addmv_&#39;, &#39;addr&#39;, &#39;affine_grid_generator&#39;, &#39;align_tensors&#39;, &#39;all&#39;, &#39;allclose&#39;, &#39;alpha_dropout&#39;, &#39;alpha_dropout_&#39;, &#39;amax&#39;, &#39;amin&#39;, &#39;angle&#39;, &#39;any&#39;, &#39;arange&#39;, &#39;arccos&#39;, &#39;arccos_&#39;, &#39;arccosh&#39;, &#39;arccosh_&#39;, &#39;arcsin&#39;, &#39;arcsin_&#39;, &#39;arcsinh&#39;, &#39;arcsinh_&#39;, &#39;arctan&#39;, &#39;arctan_&#39;, &#39;arctanh&#39;, &#39;arctanh_&#39;, &#39;are_deterministic_algorithms_enabled&#39;, &#39;argmax&#39;, &#39;argmin&#39;, &#39;argsort&#39;, &#39;as_strided&#39;, &#39;as_strided_&#39;, &#39;as_tensor&#39;, &#39;asin&#39;, &#39;asin_&#39;, &#39;asinh&#39;, &#39;asinh_&#39;, &#39;atan&#39;, &#39;atan2&#39;, &#39;atan_&#39;, &#39;atanh&#39;, &#39;atanh_&#39;, &#39;atleast_1d&#39;, &#39;atleast_2d&#39;, &#39;atleast_3d&#39;, &#39;autocast_decrement_nesting&#39;, &#39;autocast_increment_nesting&#39;, &#39;autograd&#39;, &#39;avg_pool1d&#39;, &#39;backends&#39;, &#39;baddbmm&#39;, &#39;bartlett_window&#39;, &#39;batch_norm&#39;, &#39;batch_norm_backward_elemt&#39;, &#39;batch_norm_backward_reduce&#39;, &#39;batch_norm_elemt&#39;, &#39;batch_norm_gather_stats&#39;, &#39;batch_norm_gather_stats_with_counts&#39;, &#39;batch_norm_stats&#39;, &#39;batch_norm_update_stats&#39;, &#39;bernoulli&#39;, &#39;bfloat16&#39;, &#39;bilinear&#39;, &#39;binary_cross_entropy_with_logits&#39;, &#39;bincount&#39;, &#39;binomial&#39;, &#39;bitwise_and&#39;, &#39;bitwise_not&#39;, &#39;bitwise_or&#39;, &#39;bitwise_xor&#39;, &#39;blackman_window&#39;, &#39;block_diag&#39;, &#39;bmm&#39;, &#39;bool&#39;, &#39;broadcast_shapes&#39;, &#39;broadcast_tensors&#39;, &#39;broadcast_to&#39;, &#39;bucketize&#39;, &#39;can_cast&#39;, &#39;cartesian_prod&#39;, &#39;cat&#39;, &#39;cdist&#39;, &#39;cdouble&#39;, &#39;ceil&#39;, &#39;ceil_&#39;, &#39;celu&#39;, &#39;celu_&#39;, &#39;cfloat&#39;, &#39;chain_matmul&#39;, &#39;channel_shuffle&#39;, &#39;channels_last&#39;, &#39;channels_last_3d&#39;, &#39;cholesky&#39;, &#39;cholesky_inverse&#39;, &#39;cholesky_solve&#39;, &#39;choose_qparams_optimized&#39;, &#39;chunk&#39;, &#39;clamp&#39;, &#39;clamp_&#39;, &#39;clamp_max&#39;, &#39;clamp_max_&#39;, &#39;clamp_min&#39;, &#39;clamp_min_&#39;, &#39;classes&#39;, &#39;clear_autocast_cache&#39;, &#39;clip&#39;, &#39;clip_&#39;, &#39;clone&#39;, &#39;column_stack&#39;, &#39;combinations&#39;, &#39;compiled_with_cxx11_abi&#39;, &#39;complex&#39;, &#39;complex128&#39;, &#39;complex32&#39;, &#39;complex64&#39;, &#39;conj&#39;, &#39;constant_pad_nd&#39;, &#39;contiguous_format&#39;, &#39;conv1d&#39;, &#39;conv2d&#39;, &#39;conv3d&#39;, &#39;conv_tbc&#39;, &#39;conv_transpose1d&#39;, &#39;conv_transpose2d&#39;, &#39;conv_transpose3d&#39;, &#39;convolution&#39;, &#39;copysign&#39;, &#39;cos&#39;, &#39;cos_&#39;, &#39;cosh&#39;, &#39;cosh_&#39;, &#39;cosine_embedding_loss&#39;, &#39;cosine_similarity&#39;, &#39;count_nonzero&#39;, &#39;cpp&#39;, &#39;cross&#39;, &#39;ctc_loss&#39;, &#39;ctypes&#39;, &#39;cuda&#39;, &#39;cudnn_affine_grid_generator&#39;, &#39;cudnn_batch_norm&#39;, &#39;cudnn_convolution&#39;, &#39;cudnn_convolution_transpose&#39;, &#39;cudnn_grid_sampler&#39;, &#39;cudnn_is_acceptable&#39;, &#39;cummax&#39;, &#39;cummin&#39;, &#39;cumprod&#39;, &#39;cumsum&#39;, &#39;default_generator&#39;, &#39;deg2rad&#39;, &#39;deg2rad_&#39;, &#39;dequantize&#39;, &#39;det&#39;, &#39;detach&#39;, &#39;detach_&#39;, &#39;device&#39;, &#39;diag&#39;, &#39;diag_embed&#39;, &#39;diagflat&#39;, &#39;diagonal&#39;, &#39;diff&#39;, &#39;digamma&#39;, &#39;dist&#39;, &#39;distributed&#39;, &#39;distributions&#39;, &#39;div&#39;, &#39;divide&#39;, &#39;dot&#39;, &#39;double&#39;, &#39;dropout&#39;, &#39;dropout_&#39;, &#39;dsmm&#39;, &#39;dstack&#39;, &#39;dtype&#39;, &#39;eig&#39;, &#39;einsum&#39;, &#39;embedding&#39;, &#39;embedding_bag&#39;, &#39;embedding_renorm_&#39;, &#39;empty&#39;, &#39;empty_like&#39;, &#39;empty_meta&#39;, &#39;empty_quantized&#39;, &#39;empty_strided&#39;, &#39;enable_grad&#39;, &#39;eq&#39;, &#39;equal&#39;, &#39;erf&#39;, &#39;erf_&#39;, &#39;erfc&#39;, &#39;erfc_&#39;, &#39;erfinv&#39;, &#39;exp&#39;, &#39;exp2&#39;, &#39;exp2_&#39;, &#39;exp_&#39;, &#39;expm1&#39;, &#39;expm1_&#39;, &#39;eye&#39;, &#39;fake_quantize_per_channel_affine&#39;, &#39;fake_quantize_per_tensor_affine&#39;, &#39;fbgemm_linear_fp16_weight&#39;, &#39;fbgemm_linear_fp16_weight_fp32_activation&#39;, &#39;fbgemm_linear_int8_weight&#39;, &#39;fbgemm_linear_int8_weight_fp32_activation&#39;, &#39;fbgemm_linear_quantize_weight&#39;, &#39;fbgemm_pack_gemm_matrix_fp16&#39;, &#39;fbgemm_pack_quantized_matrix&#39;, &#39;feature_alpha_dropout&#39;, &#39;feature_alpha_dropout_&#39;, &#39;feature_dropout&#39;, &#39;feature_dropout_&#39;, &#39;fft&#39;, &#39;fill_&#39;, &#39;finfo&#39;, &#39;fix&#39;, &#39;fix_&#39;, &#39;flatten&#39;, &#39;flip&#39;, &#39;fliplr&#39;, &#39;flipud&#39;, &#39;float&#39;, &#39;float16&#39;, &#39;float32&#39;, &#39;float64&#39;, &#39;float_power&#39;, &#39;floor&#39;, &#39;floor_&#39;, &#39;floor_divide&#39;, &#39;fmax&#39;, &#39;fmin&#39;, &#39;fmod&#39;, &#39;fork&#39;, &#39;frac&#39;, &#39;frac_&#39;, &#39;frobenius_norm&#39;, &#39;from_file&#39;, &#39;from_numpy&#39;, &#39;full&#39;, &#39;full_like&#39;, &#39;functional&#39;, &#39;futures&#39;, &#39;gather&#39;, &#39;gcd&#39;, &#39;gcd_&#39;, &#39;ge&#39;, &#39;geqrf&#39;, &#39;ger&#39;, &#39;get_default_dtype&#39;, &#39;get_device&#39;, &#39;get_file_path&#39;, &#39;get_num_interop_threads&#39;, &#39;get_num_threads&#39;, &#39;get_rng_state&#39;, &#39;greater&#39;, &#39;greater_equal&#39;, &#39;grid_sampler&#39;, &#39;grid_sampler_2d&#39;, &#39;grid_sampler_3d&#39;, &#39;group_norm&#39;, &#39;gru&#39;, &#39;gru_cell&#39;, &#39;gt&#39;, &#39;half&#39;, &#39;hamming_window&#39;, &#39;hann_window&#39;, &#39;hardshrink&#39;, &#39;has_cuda&#39;, &#39;has_cudnn&#39;, &#39;has_lapack&#39;, &#39;has_mkl&#39;, &#39;has_mkldnn&#39;, &#39;has_openmp&#39;, &#39;heaviside&#39;, &#39;hinge_embedding_loss&#39;, &#39;histc&#39;, &#39;hsmm&#39;, &#39;hspmm&#39;, &#39;hstack&#39;, &#39;hub&#39;, &#39;hypot&#39;, &#39;i0&#39;, &#39;i0_&#39;, &#39;igamma&#39;, &#39;igammac&#39;, &#39;iinfo&#39;, &#39;imag&#39;, &#39;import_ir_module&#39;, &#39;import_ir_module_from_buffer&#39;, &#39;index_add&#39;, &#39;index_copy&#39;, &#39;index_fill&#39;, &#39;index_put&#39;, &#39;index_put_&#39;, &#39;index_select&#39;, &#39;init_num_threads&#39;, &#39;initial_seed&#39;, &#39;inner&#39;, &#39;instance_norm&#39;, &#39;int&#39;, &#39;int16&#39;, &#39;int32&#39;, &#39;int64&#39;, &#39;int8&#39;, &#39;int_repr&#39;, &#39;inverse&#39;, &#39;is_anomaly_enabled&#39;, &#39;is_autocast_enabled&#39;, &#39;is_complex&#39;, &#39;is_deterministic&#39;, &#39;is_distributed&#39;, &#39;is_floating_point&#39;, &#39;is_grad_enabled&#39;, &#39;is_nonzero&#39;, &#39;is_same_size&#39;, &#39;is_signed&#39;, &#39;is_storage&#39;, &#39;is_tensor&#39;, &#39;is_vulkan_available&#39;, &#39;isclose&#39;, &#39;isfinite&#39;, &#39;isinf&#39;, &#39;isnan&#39;, &#39;isneginf&#39;, &#39;isposinf&#39;, &#39;isreal&#39;, &#39;istft&#39;, &#39;jit&#39;, &#39;kaiser_window&#39;, &#39;kl_div&#39;, &#39;kron&#39;, &#39;kthvalue&#39;, &#39;layer_norm&#39;, &#39;layout&#39;, &#39;lcm&#39;, &#39;lcm_&#39;, &#39;ldexp&#39;, &#39;ldexp_&#39;, &#39;le&#39;, &#39;legacy_contiguous_format&#39;, &#39;lerp&#39;, &#39;less&#39;, &#39;less_equal&#39;, &#39;lgamma&#39;, &#39;linalg&#39;, &#39;linspace&#39;, &#39;load&#39;, &#39;lobpcg&#39;, &#39;log&#39;, &#39;log10&#39;, &#39;log10_&#39;, &#39;log1p&#39;, &#39;log1p_&#39;, &#39;log2&#39;, &#39;log2_&#39;, &#39;log_&#39;, &#39;log_softmax&#39;, &#39;logaddexp&#39;, &#39;logaddexp2&#39;, &#39;logcumsumexp&#39;, &#39;logdet&#39;, &#39;logical_and&#39;, &#39;logical_not&#39;, &#39;logical_or&#39;, &#39;logical_xor&#39;, &#39;logit&#39;, &#39;logit_&#39;, &#39;logspace&#39;, &#39;logsumexp&#39;, &#39;long&#39;, &#39;lstm&#39;, &#39;lstm_cell&#39;, &#39;lstsq&#39;, &#39;lt&#39;, &#39;lu&#39;, &#39;lu_solve&#39;, &#39;lu_unpack&#39;, &#39;manual_seed&#39;, &#39;margin_ranking_loss&#39;, &#39;masked_fill&#39;, &#39;masked_scatter&#39;, &#39;masked_select&#39;, &#39;matmul&#39;, &#39;matrix_exp&#39;, &#39;matrix_power&#39;, &#39;matrix_rank&#39;, &#39;max&#39;, &#39;max_pool1d&#39;, &#39;max_pool1d_with_indices&#39;, &#39;max_pool2d&#39;, &#39;max_pool3d&#39;, &#39;maximum&#39;, &#39;mean&#39;, &#39;median&#39;, &#39;memory_format&#39;, &#39;merge_type_from_type_comment&#39;, &#39;meshgrid&#39;, &#39;min&#39;, &#39;minimum&#39;, &#39;miopen_batch_norm&#39;, &#39;miopen_convolution&#39;, &#39;miopen_convolution_transpose&#39;, &#39;miopen_depthwise_convolution&#39;, &#39;miopen_rnn&#39;, &#39;mkldnn_adaptive_avg_pool2d&#39;, &#39;mkldnn_convolution&#39;, &#39;mkldnn_convolution_backward_weights&#39;, &#39;mkldnn_linear_backward_weights&#39;, &#39;mkldnn_max_pool2d&#39;, &#39;mkldnn_max_pool3d&#39;, &#39;mm&#39;, &#39;mode&#39;, &#39;moveaxis&#39;, &#39;movedim&#39;, &#39;msort&#39;, &#39;mul&#39;, &#39;multinomial&#39;, &#39;multiply&#39;, &#39;multiprocessing&#39;, &#39;mv&#39;, &#39;mvlgamma&#39;, &#39;name&#39;, &#39;nan_to_num&#39;, &#39;nan_to_num_&#39;, &#39;nanmedian&#39;, &#39;nanquantile&#39;, &#39;nansum&#39;, &#39;narrow&#39;, &#39;narrow_copy&#39;, &#39;native_batch_norm&#39;, &#39;native_group_norm&#39;, &#39;native_layer_norm&#39;, &#39;native_norm&#39;, &#39;ne&#39;, &#39;neg&#39;, &#39;neg_&#39;, &#39;negative&#39;, &#39;negative_&#39;, &#39;nextafter&#39;, &#39;nn&#39;, &#39;no_grad&#39;, &#39;nonzero&#39;, &#39;norm&#39;, &#39;norm_except_dim&#39;, &#39;normal&#39;, &#39;not_equal&#39;, &#39;nuclear_norm&#39;, &#39;numel&#39;, &#39;ones&#39;, &#39;ones_like&#39;, &#39;onnx&#39;, &#39;ops&#39;, &#39;optim&#39;, &#39;orgqr&#39;, &#39;ormqr&#39;, &#39;os&#39;, &#39;outer&#39;, &#39;overrides&#39;, &#39;pairwise_distance&#39;, &#39;parse_ir&#39;, &#39;parse_schema&#39;, &#39;parse_type_comment&#39;, &#39;pca_lowrank&#39;, &#39;pdist&#39;, &#39;per_channel_affine&#39;, &#39;per_channel_affine_float_qparams&#39;, &#39;per_channel_symmetric&#39;, &#39;per_tensor_affine&#39;, &#39;per_tensor_symmetric&#39;, &#39;pinverse&#39;, &#39;pixel_shuffle&#39;, &#39;pixel_unshuffle&#39;, &#39;platform&#39;, &#39;poisson&#39;, &#39;poisson_nll_loss&#39;, &#39;polar&#39;, &#39;polygamma&#39;, &#39;pow&#39;, &#39;prelu&#39;, &#39;prepare_multiprocessing_environment&#39;, &#39;preserve_format&#39;, &#39;prod&#39;, &#39;profiler&#39;, &#39;promote_types&#39;, &#39;q_per_channel_axis&#39;, &#39;q_per_channel_scales&#39;, &#39;q_per_channel_zero_points&#39;, &#39;q_scale&#39;, &#39;q_zero_point&#39;, &#39;qint32&#39;, &#39;qint8&#39;, &#39;qr&#39;, &#39;qscheme&#39;, &#39;quantile&#39;, &#39;quantization&#39;, &#39;quantize_per_channel&#39;, &#39;quantize_per_tensor&#39;, &#39;quantized_batch_norm&#39;, &#39;quantized_gru&#39;, &#39;quantized_gru_cell&#39;, &#39;quantized_lstm&#39;, &#39;quantized_lstm_cell&#39;, &#39;quantized_max_pool1d&#39;, &#39;quantized_max_pool2d&#39;, &#39;quantized_rnn_relu_cell&#39;, &#39;quantized_rnn_tanh_cell&#39;, &#39;quasirandom&#39;, &#39;quint4x2&#39;, &#39;quint8&#39;, &#39;rad2deg&#39;, &#39;rad2deg_&#39;, &#39;rand&#39;, &#39;rand_like&#39;, &#39;randint&#39;, &#39;randint_like&#39;, &#39;randn&#39;, &#39;randn_like&#39;, &#39;random&#39;, &#39;randperm&#39;, &#39;range&#39;, &#39;ravel&#39;, &#39;real&#39;, &#39;reciprocal&#39;, &#39;reciprocal_&#39;, &#39;relu&#39;, &#39;relu_&#39;, &#39;remainder&#39;, &#39;renorm&#39;, &#39;repeat_interleave&#39;, &#39;reshape&#39;, &#39;resize_as_&#39;, &#39;result_type&#39;, &#39;rnn_relu&#39;, &#39;rnn_relu_cell&#39;, &#39;rnn_tanh&#39;, &#39;rnn_tanh_cell&#39;, &#39;roll&#39;, &#39;rot90&#39;, &#39;round&#39;, &#39;round_&#39;, &#39;row_stack&#39;, &#39;rrelu&#39;, &#39;rrelu_&#39;, &#39;rsqrt&#39;, &#39;rsqrt_&#39;, &#39;rsub&#39;, &#39;saddmm&#39;, &#39;save&#39;, &#39;scalar_tensor&#39;, &#39;scatter&#39;, &#39;scatter_add&#39;, &#39;searchsorted&#39;, &#39;seed&#39;, &#39;select&#39;, &#39;selu&#39;, &#39;selu_&#39;, &#39;serialization&#39;, &#39;set_anomaly_enabled&#39;, &#39;set_autocast_enabled&#39;, &#39;set_default_dtype&#39;, &#39;set_default_tensor_type&#39;, &#39;set_deterministic&#39;, &#39;set_flush_denormal&#39;, &#39;set_grad_enabled&#39;, &#39;set_num_interop_threads&#39;, &#39;set_num_threads&#39;, &#39;set_printoptions&#39;, &#39;set_rng_state&#39;, &#39;sgn&#39;, &#39;short&#39;, &#39;sigmoid&#39;, &#39;sigmoid_&#39;, &#39;sign&#39;, &#39;signbit&#39;, &#39;sin&#39;, &#39;sin_&#39;, &#39;sinc&#39;, &#39;sinc_&#39;, &#39;sinh&#39;, &#39;sinh_&#39;, &#39;slogdet&#39;, &#39;smm&#39;, &#39;softmax&#39;, &#39;solve&#39;, &#39;sort&#39;, &#39;sparse&#39;, &#39;sparse_coo&#39;, &#39;sparse_coo_tensor&#39;, &#39;split&#39;, &#39;split_with_sizes&#39;, &#39;spmm&#39;, &#39;sqrt&#39;, &#39;sqrt_&#39;, &#39;square&#39;, &#39;square_&#39;, &#39;squeeze&#39;, &#39;sspaddmm&#39;, &#39;stack&#39;, &#39;std&#39;, &#39;std_mean&#39;, &#39;stft&#39;, &#39;storage&#39;, &#39;strided&#39;, &#39;sub&#39;, &#39;subtract&#39;, &#39;sum&#39;, &#39;svd&#39;, &#39;svd_lowrank&#39;, &#39;swapaxes&#39;, &#39;swapdims&#39;, &#39;symeig&#39;, &#39;sys&#39;, &#39;t&#39;, &#39;take&#39;, &#39;tan&#39;, &#39;tan_&#39;, &#39;tanh&#39;, &#39;tanh_&#39;, &#39;tensor&#39;, &#39;tensor_split&#39;, &#39;tensordot&#39;, &#39;testing&#39;, &#39;textwrap&#39;, &#39;threshold&#39;, &#39;threshold_&#39;, &#39;tile&#39;, &#39;topk&#39;, &#39;torch&#39;, &#39;trace&#39;, &#39;transpose&#39;, &#39;trapz&#39;, &#39;triangular_solve&#39;, &#39;tril&#39;, &#39;tril_indices&#39;, &#39;triplet_margin_loss&#39;, &#39;triu&#39;, &#39;triu_indices&#39;, &#39;true_divide&#39;, &#39;trunc&#39;, &#39;trunc_&#39;, &#39;typename&#39;, &#39;types&#39;, &#39;uint8&#39;, &#39;unbind&#39;, &#39;unify_type_list&#39;, &#39;unique&#39;, &#39;unique_consecutive&#39;, ...] . m = nn.Linear(5, 6) input = torch.randn(10, 5) output = m(input) print(output.size()) . torch.Size([10, 6]) . input, output . (tensor([[ 1.9962, 0.0996, 0.1479, -1.0129, -0.0659], [-0.2024, 0.9311, 0.5858, -0.5480, 0.6899], [ 1.1325, 1.1787, -0.5252, 0.4131, -0.1455], [-0.5413, 1.9641, -1.2753, -0.0184, 1.5657], [ 0.5589, 0.0896, 0.0702, 0.0064, -0.6095], [ 0.4696, -2.1550, 0.2622, 0.6374, -0.6430], [ 1.4073, -0.4629, -0.5124, -0.5942, -0.4861], [-0.6663, -0.5769, 0.0107, -0.7793, -2.4083], [-0.1826, -0.5537, 1.1015, -1.6887, 0.2530], [ 0.1800, -0.0770, 0.5635, 0.5061, -1.5352]]), tensor([[-0.8794, 0.6896, -0.5001, 0.3345, 0.0324, -0.4620], [-0.1005, 0.0320, -0.8660, -0.3718, -0.2444, 0.6927], [ 0.2557, 0.5111, -0.6527, -0.5666, -0.5598, -0.0506], [ 0.7434, -0.8242, -0.7764, -1.7511, -1.1434, 1.4386], [ 0.0441, 0.4220, -0.4058, 0.0872, 0.1689, -0.4998], [ 0.0397, 0.5646, 0.3889, 1.0292, 0.6375, -1.4956], [-0.3732, 0.3120, -0.1057, 0.2360, 0.2516, -0.8267], [ 0.2250, -0.1463, -0.1432, 0.4105, 1.4426, -1.1975], [-0.8115, -0.0779, -0.4977, 0.5414, 0.6875, 0.0378], [ 0.2935, 0.7329, -0.4240, 0.4088, 0.5406, -0.9281]], grad_fn=&lt;AddmmBackward&gt;)) . output.show() . Epoch 1 - loss: 1.846454 [ 0/60000] loss: 1.840754 [ 6400/60000] loss: 1.688818 [12800/60000] loss: 1.605958 [19200/60000] loss: 1.861017 [25600/60000] loss: 1.867185 [32000/60000] loss: 1.773537 [38400/60000] loss: 1.907231 [44800/60000] loss: 1.729227 [51200/60000] loss: 1.645265 [57600/60000] Test Error: Accuracy: 46.8%, Avg loss: 0.027309 Epoch 2 - loss: 1.846454 [ 0/60000] loss: 1.840754 [ 6400/60000] loss: 1.688818 [12800/60000] loss: 1.605958 [19200/60000] loss: 1.861017 [25600/60000] loss: 1.867185 [32000/60000] loss: 1.773537 [38400/60000] loss: 1.907231 [44800/60000] loss: 1.729227 [51200/60000] loss: 1.645265 [57600/60000] Test Error: Accuracy: 46.8%, Avg loss: 0.027309 Epoch 3 - loss: 1.846454 [ 0/60000] loss: 1.840754 [ 6400/60000] loss: 1.688818 [12800/60000] loss: 1.605958 [19200/60000] loss: 1.861017 [25600/60000] loss: 1.867185 [32000/60000] loss: 1.773537 [38400/60000] loss: 1.907231 [44800/60000] loss: 1.729227 [51200/60000] loss: 1.645265 [57600/60000] Test Error: Accuracy: 46.8%, Avg loss: 0.027309 Epoch 4 - loss: 1.846454 [ 0/60000] loss: 1.840754 [ 6400/60000] loss: 1.688818 [12800/60000] loss: 1.605958 [19200/60000] loss: 1.861017 [25600/60000] loss: 1.867185 [32000/60000] loss: 1.773537 [38400/60000] loss: 1.907231 [44800/60000] loss: 1.729227 [51200/60000] loss: 1.645265 [57600/60000] Test Error: Accuracy: 46.8%, Avg loss: 0.027309 Epoch 5 - loss: 1.846454 [ 0/60000] loss: 1.840754 [ 6400/60000] loss: 1.688818 [12800/60000] loss: 1.605958 [19200/60000] loss: 1.861017 [25600/60000] loss: 1.867185 [32000/60000] loss: 1.773537 [38400/60000] loss: 1.907231 [44800/60000] loss: 1.729227 [51200/60000] loss: 1.645265 [57600/60000] Test Error: Accuracy: 46.8%, Avg loss: 0.027309 Done! .",
            "url": "https://simonseo.github.io/my-nlp-journey/2021/07/16/.-Torch-Test.html",
            "relUrl": "/2021/07/16/.-Torch-Test.html",
            "date": " • Jul 16, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Title",
            "content": "Topic: NMT Re-Ranking and Paraphrase Detection Using TreeLSTM-based Pointer Network and Attention Mechanism on Dependency Trees . NMT Re-Ranking . Instead of solely relying on an integrated search for the best translation, we may introduce a second decoding pass in which the best translation is chosen from the set of the most likely candidates generated by a traditional decoder. This allows more features or alternate decision rules. . Reranking (Statmt) | Energy-Based Reranking: Improving Neural Machine Translation Using Energy-Based Models (Sumanta Bhattacharyya et al.) | Neural Machine Translation: A Review and Survey (Felix Stahlberg) | A Comparable Study on Model Averaging, Ensembling and Reranking in NMT (Y. Liu et al.) | . Study Resources . Unsupervised Sub-tree Alignment for Tree-to-Tree Translation (paper) | PyTorch for Deep Learning - Full Course (FreeCodeCamp Video) | Jovian.ai Notebooks | Understanding LSTMs (Colah) | Attention Mechanism (Wikidocs 딥 러닝을 이용한 자연어 처리 입문) | BLEU (Wikidocs) | TreeLSTM (Slideshare) | TreeLSTM pytorch implementation | Dependency vs Constituency Parsing | Pointer Networks 논문 리뷰 (티스토리) | . Dependency Tree-LSTM Structure . . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Activation/Loss Functions . Why Sigmoid? | Why Softmax? | Cross Entropy | . Uncategorized . NYU Drive (ms9144) | Neural Networks, Manifolds, and Topology (colah) | How to make a C/C++ extension to Python | Git 서브모듈 | deeplearningtheory.com (physics-based interpretations) | Graph neural networks: A review of methods and applications (Elsevier paper) | Boyd CVXOPT (book, slides) | . Some Combinatorial Problems . $$ begin{align*} mathbf{u}_i &amp;= A mathbf{c}_i &amp; ; i = 1, ldots, n n mathbf{v} &amp;= B mathbf{q} n mathbf{p} &amp;= text{softmax}_i( mathbf{v}^T mathbf{u}_i) n mathbf{z} &amp;= sum_i p_i mathbf{c}_i end{align*} $$ # &lt;/div&gt; .",
            "url": "https://simonseo.github.io/my-nlp-journey/2021/07/16/.-Reference-Links.html",
            "relUrl": "/2021/07/16/.-Reference-Links.html",
            "date": " • Jul 16, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "A Test page written by myself",
            "content": "Example Markdown Post .",
            "url": "https://simonseo.github.io/my-nlp-journey/markdown/2021/07/11/test-page.html",
            "relUrl": "/markdown/2021/07/11/test-page.html",
            "date": " • Jul 11, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://simonseo.github.io/my-nlp-journey/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://simonseo.github.io/my-nlp-journey/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://simonseo.github.io/my-nlp-journey/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://simonseo.github.io/my-nlp-journey/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}